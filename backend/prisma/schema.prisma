// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Enum para os perfis de usuário
enum Role {
  PMM       // Profissional de Manutenção e Melhoria
  LIDER     // Líderes de equipe
  PMS       // Profissional de Manutenção de Sistemas
  TECNICO   // Técnicos
  ESTAGIARIO // Estagiários
}

// Enum para o status das metas
enum Status {
  PENDENTE
  EM_ANDAMENTO
  CONCLUIDA
  DELETE
}

// --- NOVOS MODELOS E RELAÇÕES ---
model ProductionLine {
  id    String @id @default(cuid())
  name  String @unique // Ex: "TRIM 1", "CHASSIS 4"
  users User[]   // Relação com os usuários
}

model User {
  id                  String           @id @default(cuid())
  email               String           @unique
  name                String
  password            String
  role                Role             @default(TECNICO)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  
  // Campos de Perfil
  technicalSkills     String?
  certifications      String?
  avatarUrl           String? //foto do usuario
  
  // Relações
  productionLines     ProductionLine[]
  evaluations         Evaluation[]
  selfAssessments     SelfAssessment[]
  receivedFeedbacks   Feedback[]       @relation("RecipientFeedbacks")
  authoredFeedbacks   Feedback[]       @relation("AuthorFeedbacks")
  goals               Goal[]           @relation("UserGoals")
  authoredGoals       Goal[]           @relation("AuthorGoals")
}

model Evaluation {
  id                             String   @id @default(cuid())
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Campos de Texto (Observações)
  technicalKnowledge_notes       String
  certifications_notes           String
  experienceTime_notes           String

  // Campos de Pontuação Numérica (1-5)
  serviceQuality_score           Int
  executionTimeframe_score       Int
  problemSolvingInitiative_score Int
  teamwork_score                 Int
  commitment_score               Int
  proactivity_score              Int

  // Indicadores OEE (%)
  availability Float
  performance  Float
  quality      Float
}

model SelfAssessment {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user   User   @relation(fields: [userId], references: [id])
  userId String

  strengths           String
  improvementPoints   String
  professionalGoals   String
}

model Feedback {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  content     String

  recipient   User   @relation("RecipientFeedbacks", fields: [recipientId], references: [id])
  recipientId String

  author   User   @relation("AuthorFeedbacks", fields: [authorId], references: [id])
  authorId String
}

model Goal {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  title       String
  description String?
  dueDate     DateTime?
  status      Status    @default(PENDENTE)
  
  user   User   @relation("UserGoals", fields: [userId], references: [id])
  userId String

  author   User   @relation("AuthorGoals", fields: [authorId], references: [id])
  authorId String
}

model DailyOeeResult {
  id            String   @id @default(cuid())
  date          DateTime
  lineDesc      String
  shift         Int
  
  availability  Float?
  performance   Float
  quality       Float?
  oee           Float

  @@unique([date, lineDesc, shift])
}

model StagingOeeResult {
  id            String   @id @default(cuid())
  date          DateTime
  lineDesc      String
  shift         Int
  availability  Float?
  performance   Float
  quality       Float?
  oee           Float

  @@unique([date, lineDesc, shift])
}